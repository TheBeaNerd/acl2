#|
 Author: Ankit Kumar

 I am writing up the following calculational proof in ACL2s, using the
 proof checker.

 From: https://www.cs.utexas.edu/users/EWD/ewd12xx/EWD1292.PDF

 Only 6, 7 and 8 are proved in the source, so I am proving 1-5 myself.


TODO : Match it up with Dijkstra's

|#

(encapsulate
  
  ( ((lt * *) => *)
    ((up * *) => *)
    ((dn * *) => *)
    ((o * *) => *) )

  ;; Concrete functions to show it is possible
  (local 
   (definec lt (a b :all) :boolean
     (lexorder a b)))

  (local 
   (definec up (a b :all) :all
     (if (lexorder a b) b a)))

  (local
   (definec dn (a b :all) :all
     (if (lexorder a b) a b)))

  ;; Two dashes because the local def of lt above gives rise to
  ;; lt-contract and it has to end with -contract for us to pick it
  ;; up.
  (property lt--contract (a b :all)
    (booleanp (lt a b))
    :rule-classes (:rewrite :type-prescription))

  ;; Observe, we can not simply copy Dijkstra's postulate (0) because that is a
  ;; bad rewrite rule in ACL2s. So, we have to be more careful about it.
  ;; We flip the == args, to make it a better rewrite rule in ACL2s.
  (property T0-lt-reflexive-antisymmetric (x y :all)
            (== (^ (lt x y)
                   (lt y x))
                (== x y)))

  ;; since uniqueness can be proved, it need not be postulated
  (property T1-up-unique (x y z :all)
            (== (lt (up x y) z)
                (^ (lt x z)
                   (lt y z))))
  
  (property T1-dn-unique (x y z :all)
            (== (lt z (dn x y))
                (^ (lt z x)
                   (lt z y))))

  (local
   (definec o (a b :all) :all
     (if (lexorder a b)
         a
       b)))

  (property o-symmetric (x y :all)
            (== (o x y)
                (o y x)))

  (property o-dis-up1 (x y z :all)
            (== (o x (up y z))
                (up (o x y) (o x z))))

  (property o-dis-up2 (x y z :all)
            (== (o (up x y) z)
                (up (o x z) (o y z))))

  (property o-dis-dn1 (x y z :all)
            (== (o x (dn y z))
                (dn (o x y) (o x z))))

  (property o-dis-dn2 (x y z :all)
            (== (o (dn x y) z)
                (dn (o x z) (o y z)))))


Conjecture T2-up-idempotent:
(== (up x x) x)

Goal: (== (up x x) x)

Proof:
(== (up x x) x)
== { Lemma T0-lt-reflexive-antisymmetric ((x (up x x)) (y x)) }
(^ (lt (up x x) x)
   (lt x (up x x)))
== { Lemma T1-up-unique ((y x) (z x)), PL }
(^ (lt x x)
   (lt x (up x x)))
== { Lemma T1-up-unique ((y x) (z (up x x))), PL }
(^ (lt x x)
   (lt (up x x) (up x x)))
== { Lemma T0-lt-reflexive-antisymmetric ((y x)), PL }
(lt (up x x) (up x x))
== { Lemma T0-lt-reflexive-antisymmetric ((x (up x x)) (y (up x x))), PL }
t

QED


Conjecture T3:
(^ (lt x (up x y))
   (lt y (up x y)))

Goal: (^ (lt x (up x y))
         (lt y (up x y)))

Proof:
(^ (lt x (up x y))
   (lt y (up x y)))
== { Lemma T1-up-unique ((z (up x y))) }
(lt (up x y) (up x y))
== { Lemma T0-lt-reflexive-antisymmetric ((x (up x y)) (y (up x y))), PL }
t

QED


Conjecture T4:
(== (== x (up x y))
    (lt y x))

Goal:
(== (== x (up x y))
    (lt y x))

Proof:
(== x (up x y))
== { Lemma T0-lt-reflexive-antisymmetric ((y (up x y))) }
(^ (lt x (up x y))
   (lt (up x y) x))
== { Conjecture T3, PL }
(lt (up x y) x)
== { Lemma T1-up-unique ((z x)) }
(^ (lt x x)
   (lt y x))
== { Lemma T0-lt-reflexive-antisymmetric ((y x)), PL }
(lt y x)

QED


Conjecture T5-lt-transitive:
(=> (^ (lt x y)
       (lt y z))
    (lt x z))

Context:
C1. (lt x y)
C2. (lt y z)

Derived Context:
D1. (== y (up y x)) { C1, Conjecture T4 ((x y) (y x)) }
D2. (lt (up y x) z) { C2, D1, Obvious }
D3. (^ (lt y z)
       (lt x z))
{ D2, Lemma T1-up-unique ((x y) (y x)) }
D4. (lt x z) { D3, C2, PL }

Goal: (lt x z)

QED


Conjecture T2-up-symmetric:
(== (up x y) (up y x))

Goal: (== (up x y) (up y x))

Proof:
(== (up x y) (up y x))
== { Lemma T0-lt-reflexive-antisymmetric ((x (up x y)) (y (up y x))) }
(^ (lt (up x y) (up y x))
   (lt (up y x) (up x y)))
== { Lemma T1-up-unique ((z (up y x))) }
(^ (lt x (up y x))
   (lt y (up y x))
   (lt (up y x) (up x y)))
== { Lemma T1-up-unique ((x y) (y x) (z (up x y))) }
(^ (lt x (up y x))
   (lt y (up y x))
   (lt y (up x y))
   (lt x (up x y)))
== { PL, Obvious }
(^ (lt x (up y x))
   (lt y (up y x))
   (lt x (up x y))
   (lt y (up x y)))
== { Conjecture T3, PL }
(^ (lt x (up y x))
   (lt y (up y x)))
== { Conjecture T3 ((x y) (y x)) }
t

QED


Conjecture T2-up-associative:
(== (up (up x y) z)
    (up x (up y z)))

Derived Context:
D1. (^ (lt x (up x y))
       (lt y (up x y)))
{ Conjecture T3 }

D2. (^ (lt y (up y z))
       (lt z (up y z)))
{ Conjecture T3 ((x y) (y z)) }

D3. (lt (up x y) (up (up x y) z))
{ Conjecture T3 ((x (up x y)) (y z)) }

D4. (lt x (up (up x y) z))
{ D1, PL, D3, Conjecture T5-lt-transitive ((y (up x y)) (z (up (up x y) z))) }

D5. (lt y (up (up x y) z))
{ D1, PL, D3, Conjecture T5-lt-transitive ((x y) (y (up x y)) (z (up (up x y) z))) }

D6. (lt (up y z) (up x (up y z)))
{ Conjecture T3 ((y (up y z))) }

D7. (lt y (up x (up y z)))
{ D2, PL, D6, Conjecture T5-lt-transitive ((x y) (y (up y z)) (z (up x (up y z))))
}

D8. (lt z (up x (up y z)))
{ D2, PL, D6, Conjecture T5-lt-transitive ((x z) (y (up y z)) (z (up x (up y z))))
}

Goal: (== (up (up x y) z)
          (up x (up y z)))

Proof:
(== (up (up x y) z)
    (up x (up y z)))
== { Lemma T0-lt-reflexive-antisymmetric ((x (up (up x y) z)) (y (up x (up y z)))) }
(^ (lt (up (up x y) z) (up x (up y z)))
   (lt (up x (up y z)) (up (up x y) z)))
== { Lemma T1-up-unique ((x (up x y)) (y z) (z (up x (up y z)))), PL }
(^ (lt (up x y) (up x (up y z)))
   (lt z (up x (up y z)))
   (lt (up x (up y z)) (up (up x y) z)))
== { Lemma T1-up-unique ((y (up y z)) (z (up (up x y) z))), PL }
(^ (lt (up x y) (up x (up y z)))
   (lt z (up x (up y z)))
   (lt x (up (up x y) z))
   (lt (up y z) (up (up x y) z)))
== { Lemma T1-up-unique ((z (up x (up y z)))), PL }
(^ (lt x (up x (up y z)))
   (lt y (up x (up y z)))
   (lt (up y z) (up (up x y) z))
   (lt z (up x (up y z)))
   (lt x (up (up x y) z)))
== { Conjecture T3 ((y (up y z))), PL }
(^ (lt y (up x (up y z)))
   (lt (up y z) (up (up x y) z))
   (lt z (up x (up y z)))
   (lt x (up (up x y) z)))
== { Lemma T1-up-unique ((x y) (y z) (z (up (up x y) z))), PL }
(^ (lt y (up (up x y) z))
   (lt z (up (up x y) z))
   (lt y (up x (up y z)))
   (lt z (up x (up y z)))
   (lt x (up (up x y) z)))
== { Conjecture T3 ((y z) (x (up x y))), PL }
(^ (lt y (up (up x y) z))
   (lt y (up x (up y z)))
   (lt z (up x (up y z)))
   (lt x (up (up x y) z)))
== { D4, D5, D7, D8, PL }
t

QED

;; Rearrangement using only T2-up-x lemmas
Lemma rearrange-upxz-upyz:
(== (up (up x z) (up y z))
    (up (up x y) z))

Goal:
(== (up (up x z) (up y z))
    (up (up x y) z))

Proof:
(up (up x z) (up y z))
== { Conjecture T2-up-symmetric ((y z)) }
(up (up z x) (up y z))
== { Conjecture T2-up-associative ((x z) (y x) (z (up y z))) }
(up z (up x (up y z)))
== { Conjecture T2-up-associative }
(up z (up (up x y) z))
== { Conjecture T2-up-symmetric ((x (up x y)) (y z)) }
(up z (up z (up x y)))
== { Conjecture T2-up-associative ((x z) (y z) (z (up x y))) }
(up (up z z) (up x y))
== { Conjecture T2-up-idempotent ((x z)) }
(up z (up x y))
== {  Conjecture T2-up-symmetric ((x z) (y (up x y))) }
(up (up x y) z)

QED

Conjecture T6-up-monotonic:
(=> (lt x y)
    (lt (up x z) (up y z)))

Context:
C1. (lt x y)

Goal: (lt (up x z) (up y z))

Proof:
(lt (up x z) (up y z))
== { Conjecture T4 ((x (up y z)) (y (up x z))) }
(== (up y z) (up (up y z) (up x z)))
;; Dijkstra combines the following 2 hints as (2) which includes
;; Lemmas T2-up-idempotent, T2-up-symmetric and T2-up-associative
== { Conjecture T2-up-symmetric ((x (up y z)) (y (up x z))) }
(== (up y z) (up (up x z) (up y z)))
== { Lemma rearrange-upxz-upyz }
(== (up y z) (up (up x y) z))
;; Leibniz
<- { Obvious }
(== y (up x y))
== { Conjecture T2-up-symmetric ((x y) (y x)) }
(== y (up y x))
== { Conjecture T4 ((x y) (y x)) }
(lt x y)
== { C1 }
t

QED


Conjecture T2-dn-idempotent:
(== (dn x x) x)

Goal: (== (dn x x) x)

Proof:
(== (dn x x) x)
== { Lemma T0-lt-reflexive-antisymmetric ((x (dn x x)) (y x)) }
(^ (lt (dn x x) x)
   (lt x (dn x x)))
== { Lemma T1-dn-unique ((y x) (z x)), PL }
(^ (lt (dn x x) x)
   (lt x x))
== { Lemma T1-dn-unique ((y x) (z (dn x x))), PL }
(^ (lt (dn x x) (dn x x))
   (lt x x))
== { Lemma T0-lt-reflexive-antisymmetric ((y x)), PL }
(lt (dn x x) (dn x x))
== { Lemma T0-lt-reflexive-antisymmetric ((x (dn x x)) (y (dn x x))), PL }
t

QED


Conjecture T3prime:
(^ (lt (dn x y) x)
   (lt (dn x y) y))

Goal:
(^ (lt (dn x y) x)
   (lt (dn x y) y))

Proof:
(^ (lt (dn x y) x)
   (lt (dn x y) y))
== { Lemma T1-dn-unique ((z (dn x y))) }
(lt (dn x y) (dn x y))
== { Lemma T0-lt-reflexive-antisymmetric ((x (dn x y)) (y (dn x y))), PL }
t

QED


Conjecture T4prime:
(== (== x (dn x y))
    (lt x y))

Goal:
(== (== x (dn x y))
    (lt x y))

Proof:
(== x (dn x y))
== { Lemma T0-lt-reflexive-antisymmetric ((y (dn x y))) }
(^ (lt (dn x y) x)
   (lt x (dn x y)))
== { Conjecture T3prime, PL }
(lt x (dn x y))
== { Lemma T1-dn-unique ((z x)) }
(^ (lt x x)
   (lt x y))
== { Lemma T0-lt-reflexive-antisymmetric ((y x)), PL }
(lt x y)

QED



Conjecture T2-dn-symmetric:
(== (dn x y) (dn y x))

Goal: (== (dn x y) (dn y x))

Proof:
(== (dn x y) (dn y x))
== { Lemma T0-lt-reflexive-antisymmetric ((x (dn x y)) (y (dn y x))) }
(^ (lt (dn y x) (dn x y))
   (lt (dn x y) (dn y x)))
== { Lemma T1-dn-unique ((z (dn y x))) }
(^ (lt (dn y x) x)
   (lt (dn y x) y)
   (lt (dn x y) (dn y x)))
== { Lemma T1-dn-unique ((x y) (y x) (z (dn x y))) }
(^ (lt (dn y x) x)
   (lt (dn y x) y)
   (lt (dn x y) y)
   (lt (dn x y) x))
== { PL, Obvious }
(^ (lt (dn y x) x)
   (lt (dn y x) y)
   (lt (dn x y) x)
   (lt (dn x y) y))
== { Conjecture T3prime, PL }
(^ (lt (dn y x) x)
   (lt (dn y x) y))
== { Conjecture T3prime ((x y) (y x)) }
t

QED



Conjecture T2-dn-associative:
(== (dn (dn x y) z)
    (dn x (dn y z)))

Derived Context:
D1. (^ (lt (dn x y) x)
       (lt (dn x y) y))
{ Conjecture T3prime }

D2. (^ (lt (dn y z) y)
       (lt (dn y z) z))
{ Conjecture T3prime ((x y) (y z)) }

D3. (lt (dn (dn x y) z) (dn x y))
{ Conjecture T3prime ((x (dn x y)) (y z)) }

;; Interesting note:
;; For prime conjectures, Dijkstra says that it is enough to flip lt arguments
;; and replace up by dn everywhere. But observe, in D4 and in D5, we also need
;; to change instantiations of Lemma lt-transitive. This is due to this lemma
;; being shared by both up and dn conjectures.
D4. (lt (dn (dn x y) z) x)
{ D1, PL, D3, Conjecture T5-lt-transitive ((x (dn (dn x y) z)) (y (dn x y)) (z x)) }

D5. (lt (dn (dn x y) z) y)
{ D1, PL, D3, Conjecture T5-lt-transitive ((x (dn (dn x y) z)) (y (dn x y)) (z y)) }

D6. (lt (dn x (dn y z)) (dn y z))
{ Conjecture T3prime ((y (dn y z))) }

D7. (lt (dn x (dn y z)) y)
{ D2, PL, D6, Conjecture T5-lt-transitive ((x (dn x (dn y z))) (y (dn y z)) (z y))
}

D8. (lt (dn x (dn y z)) z)
{ D2, PL, D6, Conjecture T5-lt-transitive ((x (dn x (dn y z))) (y (dn y z)))
}


Goal: (== (dn (dn x y) z)
          (dn x (dn y z)))

Proof:
(== (dn (dn x y) z)
    (dn x (dn y z)))
== { Lemma T0-lt-reflexive-antisymmetric ((x (dn (dn x y) z)) (y (dn x (dn y z)))) }
(^ (lt (dn x (dn y z)) (dn (dn x y) z))
   (lt (dn (dn x y) z) (dn x (dn y z))))
== { Lemma T1-dn-unique ((x (dn x y)) (y z) (z (dn x (dn y z)))), PL }
(^ (lt (dn x (dn y z)) (dn x y))
   (lt (dn x (dn y z)) z)
   (lt (dn (dn x y) z) (dn x (dn y z))))
== { Lemma T1-dn-unique ((y (dn y z)) (z (dn (dn x y) z))), PL }
(^ (lt (dn x (dn y z)) (dn x y))
   (lt (dn x (dn y z)) z)
   (lt (dn (dn x y) z) x)
   (lt (dn (dn x y) z) (dn y z)))
== { Lemma T1-dn-unique ((z (dn x (dn y z)))), PL }
(^ (lt (dn x (dn y z)) x)
   (lt (dn x (dn y z)) y)
   (lt (dn (dn x y) z) (dn y z))
   (lt (dn x (dn y z)) z)
   (lt (dn (dn x y) z) x))
== { Conjecture T3prime ((y (dn y z))), PL }
(^ (lt (dn x (dn y z)) y)
   (lt (dn (dn x y) z) (dn y z))
   (lt (dn x (dn y z)) z)
   (lt (dn (dn x y) z) x))
== { Lemma T1-dn-unique ((x y) (y z) (z (dn (dn x y) z))), PL }
(^ (lt (dn (dn x y) z) y)
   (lt (dn (dn x y) z) z)
   (lt (dn x (dn y z)) y)
   (lt (dn x (dn y z)) z)
   (lt (dn (dn x y) z) x))
== { Conjecture T3prime ((y z) (x (dn x y))), PL }
(^ (lt (dn (dn x y) z) y)
   (lt (dn x (dn y z)) y)
   (lt (dn x (dn y z)) z)
   (lt (dn (dn x y) z) x))
== { D4, D5, D7, D8, PL }
t

QED



;; Rearrangement using only T2-dn-x lemmas
Lemma rearrange-dnxz-dnyz:
(== (dn (dn x z) (dn y z))
    (dn (dn x y) z))

Goal:
(== (dn (dn x z) (dn y z))
    (dn (dn x y) z))

Proof:
(dn (dn x z) (dn y z))
== { Conjecture T2-dn-symmetric ((y z)) }
(dn (dn z x) (dn y z))
== { Conjecture T2-dn-associative ((x z) (y x) (z (dn y z))) }
(dn z (dn x (dn y z)))
== { Conjecture T2-dn-associative }
(dn z (dn (dn x y) z))
== { Conjecture T2-dn-symmetric ((x (dn x y)) (y z)) }
(dn z (dn z (dn x y)))
== { Conjecture T2-dn-associative ((x z) (y z) (z (dn x y))) }
(dn (dn z z) (dn x y))
== { Conjecture T2-dn-idempotent ((x z)) }
(dn z (dn x y))
== {  Conjecture T2-dn-symmetric ((x z) (y (dn x y))) }
(dn (dn x y) z)

QED


Conjecture T6-dn-monotonic:
(=> (lt y x)
    (lt (dn y z) (dn x z)))

Context:
C1. (lt y x)

Goal: (lt (dn y z) (dn x z))

Proof:
(lt (dn y z) (dn x z))
== { Conjecture T4prime ((x (dn y z)) (y (dn x z))) }
(== (dn y z) (dn (dn y z) (dn x z)))
;; Dijkstra combines the following 2 hints as (2) which includes
;; Lemmas T2-dn-idempotent, T2-dn-symmetric and T2-dn-associative
== { Conjecture T2-dn-symmetric ((x (dn y z)) (y (dn x z))) }
(== (dn y z) (dn (dn x z) (dn y z)))
== { Lemma rearrange-dnxz-dnyz }
(== (dn y z) (dn (dn x y) z))
<- { Obvious }
(== y (dn x y))
== { Conjecture T2-dn-symmetric ((x y) (y x)) }
(== y (dn y x))
== { Conjecture T4prime ((x y) (y x)) }
(lt y x)
== { C1 }
t

QED

#|
;; Using inv to flip args for lt
(definec inv (e :all) :all
  (match e
    (('lt x y) `(lt ,y ,x))
    ((a . b) (cons (inv a) (inv b)))
    (e e)))

t
|#

Conjecture T7-<=:
(lt (o (up x y) (dn x y))
    (o x y))

Derived Context:
;; All of the following derived context needed to be done, for Dijkstra's step:
;; "{ <= (3') and (6), twice }" It is true that we needed each of T3prime and
;; T6-up-monotonic twice, however we also needed T2-up-symmetric and
;; T5-lt-transitive, which were not mentioned in the source.
D1. (lt (dn (o x x) (o x y))
        (o x y))
{ Lemma T3prime ((x (o x x)) (y (o x y))), PL }

D2. (lt (dn (o y x) (o y y))
        (o y x))
{ Lemma T3prime ((x (o y x)) (y (o y y))), PL }

D3. (lt (up (dn (o x x) (o x y))
            (dn (o y x) (o y y)))
        (up (o x y)
            (dn (o y x) (o y y))))
{ D1, Lemma T6-up-monotonic ((x (dn (o x x) (o x y))) (y (o x y))
                             (z (dn (o y x) (o y y))))
}
                         
D4. (lt (up (dn (o x x) (o x y))
            (dn (o y x) (o y y)))
        (up (dn (o y x) (o y y))
            (o x y)))
{ D3, Conjecture T2-up-symmetric ((x (o x y)) (y (dn (o y x) (o y y)))) }

D5. (lt (up (dn (o y x) (o y y))
            (o x y))
        (up (o y x) (o x y)))
{ D2, Lemma T6-up-monotonic ((x (dn (o y x) (o y y))) (y (o y x)) (z (o x y))) }
            
D6. (lt (up (dn (o x x) (o x y))
            (dn (o y x) (o y y)))
        (up (o y x) (o x y)))
{ D4, D5, Conjecture T5-lt-transitive ((x (up (dn (o x x) (o x y))
                                              (dn (o y x) (o y y))))
                                       (y (up (dn (o y x) (o y y))
                                              (o x y)))
                                       (z (up (o y x) (o x y))))
}

D7. (lt (up (dn (o x x) (o x y))
            (dn (o y x) (o y y)))
        (up (o x y) (o x y)))
{ D6, Lemma o-symmetric ((x y) (y x)) }
        
D8. (lt (up (dn (o x x) (o x y))
            (dn (o y x) (o y y)))
        (o x y))
{ D7, Conjecture T2-up-idempotent ((x (o x y))) }


Goal:
(lt (o (up x y) (dn x y))
    (o x y))

Proof:
(o (up x y) (dn x y))
== { Lemma o-dis-up2 ((z (dn x y))) }
(up (o x (dn x y))
    (o y (dn x y)))
== { Lemma o-dis-dn1 ((y x) (z y)) }
(up (dn (o x x) (o x y))
    (o y (dn x y)))
== { Lemma o-dis-dn1 ((x y) (y x) (z y)) }
(up (dn (o x x) (o x y))
    (dn (o y x) (o y y)))
lt { D8 }
(o x y)

QED


Conjecture T7-=>:
(lt (o x y)
    (o (up x y) (dn x y)))

Derived Context:
;; All of the following derived context needed to be done, for Dijkstra's step:
;; "{ <= (3') and (6), twice }"
;; It is true that we needed each of T3 and T6-dn-monotonic twice,
;; however we also needed T2-dn-symmetric and T5-lt-transitive, which were not
;; mentioned in the source.
D1. (lt (o y x)
        (up (o x x) (o y x)))
{ Lemma T3 ((x (o x x)) (y (o y x))), PL }

D2. (lt (o x y)
        (up (o x y) (o y y)))
{ Lemma T3 ((x (o x y)) (y (o y y))), PL }

D3. (lt (dn (o y x)
            (o x y))
        (dn (up (o x x) (o y x))
            (o x y)))
{ D1, Lemma T6-dn-monotonic ((y (o y x)) (x (up (o x x) (o y x)))
                             (z (o x y)))
}
                         
D4. (lt (dn (o y x)
            (o x y))
        (dn (o x y)
            (up (o x x) (o y x))))
{ D3, Conjecture T2-dn-symmetric ((x (up (o x x) (o y x))) (y (o x y))) }

D5. (lt (dn (o x y)
            (up (o x x) (o y x)))
        (dn (up (o x y) (o y y))
            (up (o x x) (o y x))))
{ D2, Lemma T6-dn-monotonic ((y (o x y)) (x (up (o x y) (o y y)))
                             (z (up (o x x) (o y x))))
}
            
D6. (lt (dn (o y x)
            (o x y))
        (dn (up (o x y) (o y y))
            (up (o x x) (o y x))))
{ D4, D5, Conjecture T5-lt-transitive ((x (dn (o y x)
                                              (o x y)))
                                       (y (dn (o x y)
                                              (up (o x x) (o y x))))
                                       (z (dn (up (o x y) (o y y))
                                              (up (o x x) (o y x)))))
}

D7. (lt (dn (o x y)
            (o x y))
        (dn (up (o x y) (o y y))
            (up (o x x) (o y x))))
{ D6, Lemma o-symmetric ((x y) (y x)) }
        
D8. (lt (o x y)
        (dn (up (o x y) (o y y))
            (up (o x x) (o y x))))
{ D7, Conjecture T2-dn-idempotent ((x (o x y))) }


Goal:
(lt (o x y)
    (o (up x y) (dn x y)))

Proof:
(o x y)
lt {D8}
(dn (up (o x y) (o y y))
    (up (o x x) (o y x)))
== { Lemma T2-dn-symmetric ((x (up (o x x) (o y x)))
                            (y (up (o x y) (o y y))))
}
(dn (up (o x x) (o y x))
    (up (o x y) (o y y)))
== { Lemma o-dis-up2 ((z y)) }
(dn (up (o x x) (o y x))
    (o (up x y) y))
== { Lemma o-dis-up2 ((z x)) }
(dn (o (up x y) x)
    (o (up x y) y))
== { Lemma o-dis-dn1 ((y x) (z y) (x (up x y))) }
(o (up x y) (dn x y))

QED


Conjecture T7:
(== (o (up x y) (dn x y))
    (o x y))

Derived Context:
D1. (lt (o (up x y) (dn x y))
        (o x y))
{ Conjecture T7-<= }

D2. (lt (o x y)
        (o (up x y) (dn x y)))
{ Conjecture T7-=> }

D3. (== (o (up x y) (dn x y))
        (o x y))
{ D1, D2,
Lemma T0-lt-reflexive-antisymmetric
((x (o (up x y) (dn x y))) (y (o x y))) }

Goal:
(== (o (up x y) (dn x y))
    (o x y))

QED
