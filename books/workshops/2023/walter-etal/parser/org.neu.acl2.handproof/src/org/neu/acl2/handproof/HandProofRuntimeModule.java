/*
 * generated by Xtext 2.29.0
 */
package org.neu.acl2.handproof;

import org.eclipse.xtext.formatting.IIndentationInformation;
import org.eclipse.xtext.parser.antlr.ISyntaxErrorMessageProvider;
import org.eclipse.xtext.resource.ILocationInFileProvider;
import org.neu.acl2.handproof.errorhandling.HandProofSyntaxErrorMessageProvider;
import org.neu.acl2.handproof.formatting.HandProofIndentationInformation;
import org.neu.acl2.handproof.validation.EnvironmentValidationPreferencesProvider;
import org.neu.acl2.handproof.validation.IValidationFilePathProvider;
import org.neu.acl2.handproof.validation.IValidationPreferencesProvider;
import org.neu.acl2.handproof.validation.LoggingValidationMessageHandler;
import org.neu.acl2.handproof.validation.ValidationFilePathProvider;
import org.neu.acl2.handproof.validation.IValidationMessageHandler;

import com.google.inject.Binder;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class HandProofRuntimeModule extends AbstractHandProofRuntimeModule {
	public Class<? extends ISyntaxErrorMessageProvider> bindISyntaxErrorMessageProvider() {
        return HandProofSyntaxErrorMessageProvider.class;
    }
	
	@Override
	public Class<? extends ILocationInFileProvider> bindILocationInFileProvider() {
		return HandProofLocationInFileProvider.class;
	}
	
	@Override
	public void configure(Binder binder) {
		super.configure(binder);
		binder.bind(IValidationPreferencesProvider.class).to(EnvironmentValidationPreferencesProvider.class);
		binder.bind(IValidationMessageHandler.class).to(LoggingValidationMessageHandler.class);
		binder.bind(IIndentationInformation.class).to(HandProofIndentationInformation.class);
		binder.bind(IValidationFilePathProvider.class).to(ValidationFilePathProvider.class);
	}
}
