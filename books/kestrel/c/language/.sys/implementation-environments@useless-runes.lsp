(TMP-DEFTYPES-NATP-OF-NFIX)
(TMP-DEFTYPES-NFIX-WHEN-NATP
 (1 1 (:REWRITE SIMPLIFY-TERMS-SUCH-AS-A+AB-<-0))
 (1 1 (:REWRITE SIMPLIFY-SUMS-<))
 (1 1 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-<))
 (1 1 (:REWRITE REMOVE-WEAK-INEQUALITIES-TWO))
 (1 1 (:REWRITE REMOVE-WEAK-INEQUALITIES-ONE))
 (1 1 (:REWRITE PREFER-POSITIVE-ADDENDS-<))
 (1 1 (:REWRITE |(< (- x) 0)|))
 (1 1 (:REWRITE |(< (- x) (- y))|))
 )
(C::UCHAR-FORMATP
 (36 9 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (4 2 (:REWRITE SIMPLIFY-SUMS-EQUAL))
 (4 2 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-EQUAL))
 (4 2 (:REWRITE PREFER-POSITIVE-ADDENDS-EQUAL))
 (2 2 (:REWRITE |(equal (- x) (- y))|))
 )
(C::CONSP-WHEN-UCHAR-FORMATP)
(C::UCHAR-FORMAT-FIX$INLINE)
(C::UCHAR-FORMATP-OF-UCHAR-FORMAT-FIX
 (3 1 (:REWRITE TMP-DEFTYPES-NFIX-WHEN-NATP))
 (2 2 (:TYPE-PRESCRIPTION NATP))
 )
(C::UCHAR-FORMAT-FIX-WHEN-UCHAR-FORMATP
 (5 2 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (1 1 (:DEFINITION STRIP-CARS))
 (1 1 (:DEFINITION ALISTP))
 )
(C::UCHAR-FORMAT-FIX$INLINE
 (5 2 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (1 1 (:DEFINITION STRIP-CARS))
 (1 1 (:DEFINITION ALISTP))
 )
(FTY::TMP-DEFFIXTYPE-IDEMPOTENT)
(C::UCHAR-FORMAT-EQUIV$INLINE)
(C::UCHAR-FORMAT-EQUIV-IS-AN-EQUIVALENCE)
(C::UCHAR-FORMAT-EQUIV-IMPLIES-EQUAL-UCHAR-FORMAT-FIX-1)
(C::UCHAR-FORMAT-FIX-UNDER-UCHAR-FORMAT-EQUIV)
(C::EQUAL-OF-UCHAR-FORMAT-FIX-1-FORWARD-TO-UCHAR-FORMAT-EQUIV)
(C::EQUAL-OF-UCHAR-FORMAT-FIX-2-FORWARD-TO-UCHAR-FORMAT-EQUIV)
(C::UCHAR-FORMAT-EQUIV-OF-UCHAR-FORMAT-FIX-1-FORWARD)
(C::UCHAR-FORMAT-EQUIV-OF-UCHAR-FORMAT-FIX-2-FORWARD)
(C::UCHAR-FORMAT->BITS$INLINE
 (4 1 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (1 1 (:DEFINITION STRIP-CARS))
 (1 1 (:DEFINITION ALISTP))
 )
(C::NATP-OF-UCHAR-FORMAT->BITS)
(C::UCHAR-FORMAT->BITS$INLINE-OF-UCHAR-FORMAT-FIX-X
 (225 75 (:REWRITE C::UCHAR-FORMAT-FIX-WHEN-UCHAR-FORMATP))
 (150 150 (:TYPE-PRESCRIPTION C::UCHAR-FORMATP))
 (4 4 (:TYPE-PRESCRIPTION NATP))
 )
(C::UCHAR-FORMAT->BITS$INLINE-UCHAR-FORMAT-EQUIV-CONGRUENCE-ON-X)
(C::UCHAR-FORMAT)
(C::UCHAR-FORMATP-OF-UCHAR-FORMAT
 (12 4 (:REWRITE TMP-DEFTYPES-NFIX-WHEN-NATP))
 (4 1 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 )
(C::UCHAR-FORMAT->BITS-OF-UCHAR-FORMAT
 (4 4 (:TYPE-PRESCRIPTION NATP))
 )
(C::UCHAR-FORMAT-REQUIREMENTS
 (3 1 (:REWRITE TMP-DEFTYPES-NFIX-WHEN-NATP))
 (2 2 (:TYPE-PRESCRIPTION NATP))
 )
(C::UCHAR-FORMAT-OF-FIELDS
 (3 1 (:REWRITE C::UCHAR-FORMAT-FIX-WHEN-UCHAR-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::UCHAR-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION NATP))
 )
(C::UCHAR-FORMAT-FIX-WHEN-UCHAR-FORMAT
 (3 1 (:REWRITE C::UCHAR-FORMAT-FIX-WHEN-UCHAR-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::UCHAR-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION NATP))
 )
(C::EQUAL-OF-UCHAR-FORMAT
 (19 19 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (17 17 (:REWRITE FTY::EQUAL-OF-CONS-BY-EQUAL-OF-STRIP-CARS))
 )
(C::UCHAR-FORMAT-OF-NFIX-BITS
 (2 2 (:TYPE-PRESCRIPTION NATP))
 )
(C::UCHAR-FORMAT-NAT-EQUIV-CONGRUENCE-ON-BITS)
(C::UCHAR-FORMAT-FIX-REDEF)
(C::SIGNED-FORMATP)
(C::CONSP-WHEN-SIGNED-FORMATP)
(C::SIGNED-FORMAT-KIND$INLINE)
(C::SIGNED-FORMAT-KIND-POSSIBILITIES)
(C::SIGNED-FORMAT-FIX$INLINE)
(C::SIGNED-FORMATP-OF-SIGNED-FORMAT-FIX)
(C::SIGNED-FORMAT-FIX-WHEN-SIGNED-FORMATP)
(C::SIGNED-FORMAT-FIX$INLINE)
(FTY::TMP-DEFFIXTYPE-IDEMPOTENT)
(C::SIGNED-FORMAT-EQUIV$INLINE)
(C::SIGNED-FORMAT-EQUIV-IS-AN-EQUIVALENCE)
(C::SIGNED-FORMAT-EQUIV-IMPLIES-EQUAL-SIGNED-FORMAT-FIX-1)
(C::SIGNED-FORMAT-FIX-UNDER-SIGNED-FORMAT-EQUIV)
(C::EQUAL-OF-SIGNED-FORMAT-FIX-1-FORWARD-TO-SIGNED-FORMAT-EQUIV)
(C::EQUAL-OF-SIGNED-FORMAT-FIX-2-FORWARD-TO-SIGNED-FORMAT-EQUIV)
(C::SIGNED-FORMAT-EQUIV-OF-SIGNED-FORMAT-FIX-1-FORWARD)
(C::SIGNED-FORMAT-EQUIV-OF-SIGNED-FORMAT-FIX-2-FORWARD)
(C::SIGNED-FORMAT-KIND$INLINE-OF-SIGNED-FORMAT-FIX-X
 (1 1 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGNED-FORMATP))
 )
(C::SIGNED-FORMAT-KIND$INLINE-SIGNED-FORMAT-EQUIV-CONGRUENCE-ON-X)
(C::CONSP-OF-SIGNED-FORMAT-FIX)
(C::TAG-WHEN-SIGNED-FORMATP-FORWARD)
(C::TAG-OF-SIGNED-FORMAT-FIX)
(C::SIGNED-FORMAT-SIGN-MAGNITUDE)
(C::RETURN-TYPE-OF-SIGNED-FORMAT-SIGN-MAGNITUDE)
(C::SIGNED-FORMAT-FIX-WHEN-SIGN-MAGNITUDE
 (3 1 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGNED-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::SIGNED-FORMATP))
 )
(C::EQUAL-OF-SIGNED-FORMAT-SIGN-MAGNITUDE
 (3 3 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 )
(C::SIGNED-FORMAT-ONES-COMPLEMENT)
(C::RETURN-TYPE-OF-SIGNED-FORMAT-ONES-COMPLEMENT)
(C::SIGNED-FORMAT-FIX-WHEN-ONES-COMPLEMENT
 (3 1 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGNED-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::SIGNED-FORMATP))
 (1 1 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGN-MAGNITUDE))
 )
(C::EQUAL-OF-SIGNED-FORMAT-ONES-COMPLEMENT
 (3 3 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (2 2 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGN-MAGNITUDE))
 )
(C::SIGNED-FORMAT-TWOS-COMPLEMENT)
(C::RETURN-TYPE-OF-SIGNED-FORMAT-TWOS-COMPLEMENT)
(C::SIGNED-FORMAT-FIX-WHEN-TWOS-COMPLEMENT
 (3 1 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGNED-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::SIGNED-FORMATP))
 (1 1 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGN-MAGNITUDE))
 (1 1 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-ONES-COMPLEMENT))
 )
(C::EQUAL-OF-SIGNED-FORMAT-TWOS-COMPLEMENT
 (3 3 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (2 2 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGN-MAGNITUDE))
 (2 2 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-ONES-COMPLEMENT))
 )
(C::SIGNED-FORMAT-FIX-REDEF
 (3 1 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGNED-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::SIGNED-FORMATP))
 )
(TMP-DEFTYPES-BOOLEANP-OF-BOOL-FIX$INLINE)
(C::SCHAR-FORMATP
 (40 10 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (4 2 (:REWRITE SIMPLIFY-SUMS-EQUAL))
 (4 2 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-EQUAL))
 (4 2 (:REWRITE PREFER-POSITIVE-ADDENDS-EQUAL))
 (2 2 (:REWRITE |(equal (- x) (- y))|))
 )
(C::CONSP-WHEN-SCHAR-FORMATP)
(C::SCHAR-FORMAT-FIX$INLINE)
(C::SCHAR-FORMATP-OF-SCHAR-FORMAT-FIX
 (14 6 (:REWRITE BOOL-FIX-WHEN-BOOLEANP))
 (12 4 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGNED-FORMATP))
 (8 8 (:TYPE-PRESCRIPTION C::SIGNED-FORMATP))
 (8 8 (:TYPE-PRESCRIPTION BOOLEANP))
 )
(C::SCHAR-FORMAT-FIX-WHEN-SCHAR-FORMATP
 (5 2 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (1 1 (:DEFINITION STRIP-CARS))
 (1 1 (:DEFINITION ALISTP))
 )
(C::SCHAR-FORMAT-FIX$INLINE
 (31 14 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-EQUAL))
 (28 16 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (22 14 (:REWRITE SIMPLIFY-SUMS-EQUAL))
 (22 14 (:REWRITE PREFER-POSITIVE-ADDENDS-EQUAL))
 (18 9 (:REWRITE ACL2-NUMBERP-OF-CAR-WHEN-ACL2-NUMBER-LISTP))
 (14 14 (:REWRITE |(equal (- x) (- y))|))
 (8 8 (:REWRITE FTY::EQUAL-OF-CONS-BY-EQUAL-OF-STRIP-CARS))
 (3 3 (:REWRITE ACL2-NUMBER-LISTP-WHEN-NOT-CONSP))
 )
(FTY::TMP-DEFFIXTYPE-IDEMPOTENT)
(C::SCHAR-FORMAT-EQUIV$INLINE)
(C::SCHAR-FORMAT-EQUIV-IS-AN-EQUIVALENCE)
(C::SCHAR-FORMAT-EQUIV-IMPLIES-EQUAL-SCHAR-FORMAT-FIX-1)
(C::SCHAR-FORMAT-FIX-UNDER-SCHAR-FORMAT-EQUIV)
(C::EQUAL-OF-SCHAR-FORMAT-FIX-1-FORWARD-TO-SCHAR-FORMAT-EQUIV)
(C::EQUAL-OF-SCHAR-FORMAT-FIX-2-FORWARD-TO-SCHAR-FORMAT-EQUIV)
(C::SCHAR-FORMAT-EQUIV-OF-SCHAR-FORMAT-FIX-1-FORWARD)
(C::SCHAR-FORMAT-EQUIV-OF-SCHAR-FORMAT-FIX-2-FORWARD)
(C::SCHAR-FORMAT->SIGNED$INLINE
 (4 1 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (1 1 (:DEFINITION STRIP-CARS))
 )
(C::SIGNED-FORMATP-OF-SCHAR-FORMAT->SIGNED)
(C::SCHAR-FORMAT->SIGNED$INLINE-OF-SCHAR-FORMAT-FIX-X
 (9 3 (:REWRITE C::SCHAR-FORMAT-FIX-WHEN-SCHAR-FORMATP))
 (6 6 (:TYPE-PRESCRIPTION C::SCHAR-FORMATP))
 (3 1 (:REWRITE BOOL-FIX-WHEN-BOOLEANP))
 (2 2 (:TYPE-PRESCRIPTION BOOLEANP))
 )
(C::SCHAR-FORMAT->SIGNED$INLINE-SCHAR-FORMAT-EQUIV-CONGRUENCE-ON-X)
(C::SCHAR-FORMAT->TRAP$INLINE
 (4 1 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 )
(C::BOOLEANP-OF-SCHAR-FORMAT->TRAP)
(C::SCHAR-FORMAT->TRAP$INLINE-OF-SCHAR-FORMAT-FIX-X
 (9 3 (:REWRITE C::SCHAR-FORMAT-FIX-WHEN-SCHAR-FORMATP))
 (6 6 (:TYPE-PRESCRIPTION C::SCHAR-FORMATP))
 (3 1 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGNED-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::SIGNED-FORMATP))
 )
(C::SCHAR-FORMAT->TRAP$INLINE-SCHAR-FORMAT-EQUIV-CONGRUENCE-ON-X)
(C::SCHAR-FORMAT)
(C::SCHAR-FORMATP-OF-SCHAR-FORMAT
 (8 4 (:REWRITE BOOL-FIX-WHEN-BOOLEANP))
 (6 2 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGNED-FORMATP))
 (4 4 (:TYPE-PRESCRIPTION C::SIGNED-FORMATP))
 (4 4 (:TYPE-PRESCRIPTION BOOLEANP))
 )
(C::SCHAR-FORMAT->SIGNED-OF-SCHAR-FORMAT)
(C::SCHAR-FORMAT->TRAP-OF-SCHAR-FORMAT)
(C::SCHAR-FORMAT-OF-FIELDS
 (3 1 (:REWRITE C::SCHAR-FORMAT-FIX-WHEN-SCHAR-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::SCHAR-FORMATP))
 )
(C::SCHAR-FORMAT-FIX-WHEN-SCHAR-FORMAT
 (3 1 (:REWRITE C::SCHAR-FORMAT-FIX-WHEN-SCHAR-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::SCHAR-FORMATP))
 )
(C::EQUAL-OF-SCHAR-FORMAT
 (23 23 (:REWRITE BOOL-FIX-WHEN-BOOLEANP))
 (6 6 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (6 6 (:REWRITE FTY::EQUAL-OF-CONS-BY-EQUAL-OF-STRIP-CARS))
 )
(C::SCHAR-FORMAT-OF-SIGNED-FORMAT-FIX-SIGNED
 (4 2 (:REWRITE BOOL-FIX-WHEN-BOOLEANP))
 (2 2 (:TYPE-PRESCRIPTION BOOLEANP))
 )
(C::SCHAR-FORMAT-SIGNED-FORMAT-EQUIV-CONGRUENCE-ON-SIGNED)
(C::SCHAR-FORMAT-OF-BOOL-FIX-TRAP
 (4 2 (:REWRITE C::SIGNED-FORMAT-FIX-WHEN-SIGNED-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::SIGNED-FORMATP))
 )
(C::SCHAR-FORMAT-IFF-CONGRUENCE-ON-TRAP)
(C::SCHAR-FORMAT-FIX-REDEF)
(C::IENVP
 (40 10 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (19 5 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-EQUAL))
 (18 9 (:REWRITE ACL2-NUMBERP-OF-CAR-WHEN-ACL2-NUMBER-LISTP))
 (10 5 (:REWRITE SIMPLIFY-SUMS-EQUAL))
 (10 5 (:REWRITE PREFER-POSITIVE-ADDENDS-EQUAL))
 (6 6 (:TYPE-PRESCRIPTION ACL2-NUMBER-LISTP))
 (5 5 (:REWRITE |(equal (- x) (- y))|))
 (3 3 (:REWRITE ACL2-NUMBER-LISTP-WHEN-NOT-CONSP))
 )
(C::CONSP-WHEN-IENVP)
(C::TAG-WHEN-IENVP)
(C::IENVP-WHEN-WRONG-TAG)
(C::IENV-FIX$INLINE)
(C::IENVP-OF-IENV-FIX
 (14 6 (:REWRITE C::SCHAR-FORMAT-FIX-WHEN-SCHAR-FORMATP))
 (12 4 (:REWRITE C::UCHAR-FORMAT-FIX-WHEN-UCHAR-FORMATP))
 (8 8 (:TYPE-PRESCRIPTION C::UCHAR-FORMATP))
 (8 8 (:TYPE-PRESCRIPTION C::SCHAR-FORMATP))
 )
(C::IENV-FIX-WHEN-IENVP
 (1 1 (:DEFINITION STRIP-CARS))
 (1 1 (:DEFINITION ALISTP))
 )
(C::IENV-FIX$INLINE
 (105 25 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (52 23 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-EQUAL))
 (36 18 (:REWRITE ACL2-NUMBERP-OF-CAR-WHEN-ACL2-NUMBER-LISTP))
 (34 23 (:REWRITE SIMPLIFY-SUMS-EQUAL))
 (34 23 (:REWRITE PREFER-POSITIVE-ADDENDS-EQUAL))
 (23 23 (:REWRITE |(equal (- x) (- y))|))
 (10 10 (:REWRITE FTY::EQUAL-OF-CONS-BY-EQUAL-OF-STRIP-CARS))
 (6 6 (:REWRITE ACL2-NUMBER-LISTP-WHEN-NOT-CONSP))
 )
(FTY::TMP-DEFFIXTYPE-IDEMPOTENT)
(C::IENV-EQUIV$INLINE)
(C::IENV-EQUIV-IS-AN-EQUIVALENCE)
(C::IENV-EQUIV-IMPLIES-EQUAL-IENV-FIX-1)
(C::IENV-FIX-UNDER-IENV-EQUIV)
(C::EQUAL-OF-IENV-FIX-1-FORWARD-TO-IENV-EQUIV)
(C::EQUAL-OF-IENV-FIX-2-FORWARD-TO-IENV-EQUIV)
(C::IENV-EQUIV-OF-IENV-FIX-1-FORWARD)
(C::IENV-EQUIV-OF-IENV-FIX-2-FORWARD)
(C::TAG-OF-IENV-FIX)
(C::IENV->UCHAR-FORMAT$INLINE
 (4 1 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 (1 1 (:DEFINITION STRIP-CARS))
 )
(C::UCHAR-FORMATP-OF-IENV->UCHAR-FORMAT)
(C::IENV->UCHAR-FORMAT$INLINE-OF-IENV-FIX-X
 (9 3 (:REWRITE C::IENV-FIX-WHEN-IENVP))
 (6 6 (:TYPE-PRESCRIPTION C::IENVP))
 (3 1 (:REWRITE C::SCHAR-FORMAT-FIX-WHEN-SCHAR-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::SCHAR-FORMATP))
 )
(C::IENV->UCHAR-FORMAT$INLINE-IENV-EQUIV-CONGRUENCE-ON-X)
(C::IENV->SCHAR-FORMAT$INLINE
 (4 1 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 )
(C::SCHAR-FORMATP-OF-IENV->SCHAR-FORMAT)
(C::IENV->SCHAR-FORMAT$INLINE-OF-IENV-FIX-X
 (9 3 (:REWRITE C::IENV-FIX-WHEN-IENVP))
 (6 6 (:TYPE-PRESCRIPTION C::IENVP))
 (3 1 (:REWRITE C::UCHAR-FORMAT-FIX-WHEN-UCHAR-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::UCHAR-FORMATP))
 )
(C::IENV->SCHAR-FORMAT$INLINE-IENV-EQUIV-CONGRUENCE-ON-X)
(C::IENV)
(C::IENVP-OF-IENV
 (8 4 (:REWRITE C::SCHAR-FORMAT-FIX-WHEN-SCHAR-FORMATP))
 (6 2 (:REWRITE C::UCHAR-FORMAT-FIX-WHEN-UCHAR-FORMATP))
 (4 4 (:TYPE-PRESCRIPTION C::UCHAR-FORMATP))
 (4 4 (:TYPE-PRESCRIPTION C::SCHAR-FORMATP))
 )
(C::IENV->UCHAR-FORMAT-OF-IENV)
(C::IENV->SCHAR-FORMAT-OF-IENV)
(C::IENV-OF-FIELDS
 (3 1 (:REWRITE C::IENV-FIX-WHEN-IENVP))
 (2 2 (:TYPE-PRESCRIPTION C::IENVP))
 )
(C::IENV-FIX-WHEN-IENV
 (3 1 (:REWRITE C::IENV-FIX-WHEN-IENVP))
 (2 2 (:TYPE-PRESCRIPTION C::IENVP))
 )
(C::EQUAL-OF-IENV
 (1 1 (:REWRITE FTY::PROVE-EQUAL-OF-CONS-WHEN-FIRST-QUOTEP))
 )
(C::IENV-OF-UCHAR-FORMAT-FIX-UCHAR-FORMAT
 (4 2 (:REWRITE C::SCHAR-FORMAT-FIX-WHEN-SCHAR-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::SCHAR-FORMATP))
 )
(C::IENV-UCHAR-FORMAT-EQUIV-CONGRUENCE-ON-UCHAR-FORMAT)
(C::IENV-OF-SCHAR-FORMAT-FIX-SCHAR-FORMAT
 (4 2 (:REWRITE C::UCHAR-FORMAT-FIX-WHEN-UCHAR-FORMATP))
 (2 2 (:TYPE-PRESCRIPTION C::UCHAR-FORMATP))
 )
(C::IENV-SCHAR-FORMAT-EQUIV-CONGRUENCE-ON-SCHAR-FORMAT)
(C::IENV-FIX-REDEF)
(C::TAG-OF-IENV)
(C::IENV->CHAR-BITS)
(C::POSP-OF-IENV->CHAR-BITS)
(C::IENV->CHAR-BITS-TYPE-PRESCRIPTION)
(C::IENV->CHAR-BITS-LOWER-BOUND)
(C::IENV->CHAR-BITS-OF-IENV-FIX-IENV)
(C::IENV->CHAR-BITS-IENV-EQUIV-CONGRUENCE-ON-IENV)
(C::IENV->UCHAR-MAX)
(C::POSP-OF-IENV->UCHAR-MAX
 (2 1 (:REWRITE DEFAULT-EXPT-2))
 (2 1 (:REWRITE |(expt 2^i n)|))
 (2 1 (:LINEAR EXPT-<-1-TWO))
 (1 1 (:REWRITE DEFAULT-EXPT-1))
 (1 1 (:REWRITE |(expt x (- n))|))
 (1 1 (:REWRITE |(expt 1/c n)|))
 (1 1 (:REWRITE |(expt (- x) n)|))
 (1 1 (:LINEAR EXPT->-1-TWO))
 (1 1 (:LINEAR EXPT-<-1-ONE))
 )
(C::IENV->UCHAR-MAX-TYPE-PRESCRIPTION
 (15 1 (:LINEAR EXPT-X->=-X))
 (8 4 (:REWRITE DEFAULT-EXPT-2))
 (8 4 (:REWRITE |(expt 2^i n)|))
 (4 4 (:REWRITE DEFAULT-EXPT-1))
 (4 4 (:REWRITE |(expt x (- n))|))
 (4 4 (:REWRITE |(expt 1/c n)|))
 (4 4 (:REWRITE |(expt (- x) n)|))
 (4 2 (:LINEAR EXPT-<-1-TWO))
 (2 2 (:LINEAR EXPT-IS-WEAKLY-INCREASING-FOR-BASE->-1))
 (2 2 (:LINEAR EXPT-IS-WEAKLY-DECREASING-FOR-POS-BASE-<-1))
 (2 2 (:LINEAR EXPT-IS-INCREASING-FOR-BASE->-1))
 (2 2 (:LINEAR EXPT-IS-DECREASING-FOR-POS-BASE-<-1))
 (2 2 (:LINEAR EXPT->-1-TWO))
 (2 2 (:LINEAR EXPT-<-1-ONE))
 )
(C::LEMMA
 (15 1 (:LINEAR EXPT-X->=-X))
 (10 5 (:REWRITE DEFAULT-EXPT-2))
 (10 5 (:REWRITE |(expt 2^i n)|))
 (7 2 (:REWRITE SIMPLIFY-SUMS-<))
 (7 2 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-<))
 (7 2 (:REWRITE PREFER-POSITIVE-ADDENDS-<))
 (5 5 (:REWRITE DEFAULT-EXPT-1))
 (5 5 (:REWRITE |(expt x (- n))|))
 (5 5 (:REWRITE |(expt 1/c n)|))
 (5 5 (:REWRITE |(expt (- x) n)|))
 (2 2 (:REWRITE REMOVE-WEAK-INEQUALITIES-ONE))
 (2 2 (:REWRITE |(< (- x) (- y))|))
 (2 2 (:LINEAR EXPT-IS-WEAKLY-DECREASING-FOR-POS-BASE-<-1))
 (2 2 (:LINEAR EXPT-IS-INCREASING-FOR-BASE->-1))
 (2 2 (:LINEAR EXPT-IS-DECREASING-FOR-POS-BASE-<-1))
 (2 1 (:LINEAR EXPT-<-1-TWO))
 (1 1 (:LINEAR EXPT->-1-TWO))
 (1 1 (:LINEAR EXPT-<-1-ONE))
 )
(C::IENV->UCHAR-MAX-LOWER-BOUND
 (5 1 (:REWRITE SIMPLIFY-SUMS-<))
 (5 1 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-<))
 (5 1 (:REWRITE PREFER-POSITIVE-ADDENDS-<))
 (4 2 (:REWRITE DEFAULT-EXPT-2))
 (4 2 (:REWRITE |(expt 2^i n)|))
 (2 2 (:REWRITE REMOVE-WEAK-INEQUALITIES-TWO))
 (2 2 (:REWRITE REMOVE-WEAK-INEQUALITIES-ONE))
 (2 2 (:REWRITE DEFAULT-EXPT-1))
 (2 2 (:REWRITE |(expt x (- n))|))
 (2 2 (:REWRITE |(expt 1/c n)|))
 (2 2 (:REWRITE |(expt (- x) n)|))
 (1 1 (:REWRITE NORMALIZE-TERMS-SUCH-AS-A/A+B-+-B/A+B))
 (1 1 (:REWRITE NORMALIZE-ADDENDS))
 (1 1 (:REWRITE |(< (- x) (- y))|))
 )
(C::IENV->UCHAR-MAX-OF-IENV-FIX-IENV)
(C::IENV->UCHAR-MAX-IENV-EQUIV-CONGRUENCE-ON-IENV)
(C::IENV->SCHAR-MAX)
(C::POSP-OF-IENV->SCHAR-MAX
 (2 1 (:REWRITE DEFAULT-EXPT-2))
 (2 1 (:REWRITE |(expt 2^i n)|))
 (2 1 (:LINEAR EXPT-<-1-TWO))
 (1 1 (:REWRITE DEFAULT-EXPT-1))
 (1 1 (:REWRITE |(expt x (- n))|))
 (1 1 (:REWRITE |(expt 1/c n)|))
 (1 1 (:REWRITE |(expt (- x) n)|))
 (1 1 (:LINEAR EXPT->-1-TWO))
 (1 1 (:LINEAR EXPT-<-1-ONE))
 )
(C::IENV->SCHAR-MAX-TYPE-PRESCRIPTION
 (19 1 (:LINEAR EXPT-X->=-X))
 (8 4 (:REWRITE DEFAULT-EXPT-2))
 (8 4 (:REWRITE |(expt 2^i n)|))
 (4 4 (:REWRITE DEFAULT-EXPT-1))
 (4 4 (:REWRITE |(expt x (- n))|))
 (4 4 (:REWRITE |(expt 1/c n)|))
 (4 4 (:REWRITE |(expt (- x) n)|))
 (4 2 (:LINEAR EXPT-<-1-TWO))
 (2 2 (:LINEAR EXPT-IS-WEAKLY-INCREASING-FOR-BASE->-1))
 (2 2 (:LINEAR EXPT-IS-WEAKLY-DECREASING-FOR-POS-BASE-<-1))
 (2 2 (:LINEAR EXPT-IS-INCREASING-FOR-BASE->-1))
 (2 2 (:LINEAR EXPT-IS-DECREASING-FOR-POS-BASE-<-1))
 (2 2 (:LINEAR EXPT->-1-TWO))
 (2 2 (:LINEAR EXPT-<-1-ONE))
 )
(C::LEMMA
 (19 1 (:LINEAR EXPT-X->=-X))
 (10 5 (:REWRITE DEFAULT-EXPT-2))
 (10 5 (:REWRITE |(expt 2^i n)|))
 (7 2 (:REWRITE SIMPLIFY-SUMS-<))
 (7 2 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-<))
 (7 2 (:REWRITE PREFER-POSITIVE-ADDENDS-<))
 (5 5 (:REWRITE DEFAULT-EXPT-1))
 (5 5 (:REWRITE |(expt x (- n))|))
 (5 5 (:REWRITE |(expt 1/c n)|))
 (5 5 (:REWRITE |(expt (- x) n)|))
 (4 4 (:REWRITE NORMALIZE-TERMS-SUCH-AS-A/A+B-+-B/A+B))
 (4 4 (:REWRITE NORMALIZE-ADDENDS))
 (3 3 (:REWRITE REMOVE-WEAK-INEQUALITIES-ONE))
 (2 2 (:REWRITE |(< (- x) (- y))|))
 (2 2 (:LINEAR EXPT-IS-WEAKLY-DECREASING-FOR-POS-BASE-<-1))
 (2 2 (:LINEAR EXPT-IS-INCREASING-FOR-BASE->-1))
 (2 2 (:LINEAR EXPT-IS-DECREASING-FOR-POS-BASE-<-1))
 (2 1 (:LINEAR EXPT-<-1-TWO))
 (1 1 (:LINEAR EXPT->-1-TWO))
 (1 1 (:LINEAR EXPT-<-1-ONE))
 )
(C::IENV->SCHAR-MAX-LOWER-BOUND
 (5 1 (:REWRITE SIMPLIFY-SUMS-<))
 (5 1 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-<))
 (5 1 (:REWRITE PREFER-POSITIVE-ADDENDS-<))
 (4 2 (:REWRITE DEFAULT-EXPT-2))
 (4 2 (:REWRITE |(expt 2^i n)|))
 (3 3 (:REWRITE NORMALIZE-TERMS-SUCH-AS-A/A+B-+-B/A+B))
 (3 3 (:REWRITE NORMALIZE-ADDENDS))
 (2 2 (:REWRITE REMOVE-WEAK-INEQUALITIES-TWO))
 (2 2 (:REWRITE REMOVE-WEAK-INEQUALITIES-ONE))
 (2 2 (:REWRITE DEFAULT-EXPT-1))
 (2 2 (:REWRITE |(expt x (- n))|))
 (2 2 (:REWRITE |(expt 1/c n)|))
 (2 2 (:REWRITE |(expt (- x) n)|))
 (1 1 (:REWRITE |(< (- x) (- y))|))
 )
(C::IENV->SCHAR-MAX-OF-IENV-FIX-IENV)
(C::IENV->SCHAR-MAX-IENV-EQUIV-CONGRUENCE-ON-IENV)
(C::IENV->SCHAR-MIN)
(C::INTEGERP-OF-IENV->SCHAR-MIN)
(C::IENV->SCHAR-MIN-TYPE-PRESCRIPTION
 (16 8 (:REWRITE DEFAULT-EXPT-2))
 (16 8 (:REWRITE |(expt 2^i n)|))
 (15 3 (:REWRITE SIMPLIFY-SUMS-<))
 (15 3 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-<))
 (15 3 (:REWRITE PREFER-POSITIVE-ADDENDS-<))
 (10 10 (:REWRITE REMOVE-WEAK-INEQUALITIES-TWO))
 (10 10 (:REWRITE REMOVE-WEAK-INEQUALITIES-ONE))
 (10 10 (:REWRITE NORMALIZE-TERMS-SUCH-AS-A/A+B-+-B/A+B))
 (10 10 (:REWRITE NORMALIZE-ADDENDS))
 (8 8 (:REWRITE DEFAULT-EXPT-1))
 (8 8 (:REWRITE |(expt x (- n))|))
 (8 8 (:REWRITE |(expt 1/c n)|))
 (8 8 (:REWRITE |(expt (- x) n)|))
 (4 2 (:REWRITE SIMPLIFY-SUMS-EQUAL))
 (4 2 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-EQUAL))
 (4 2 (:REWRITE PREFER-POSITIVE-ADDENDS-EQUAL))
 (4 2 (:LINEAR EXPT-<-1-TWO))
 (2 2 (:REWRITE |(equal (- x) (- y))|))
 (2 2 (:LINEAR EXPT->-1-TWO))
 (2 2 (:LINEAR EXPT-<-1-ONE))
 (1 1 (:REWRITE SIMPLIFY-TERMS-SUCH-AS-0-<-A+AB))
 (1 1 (:REWRITE |(< 0 (- x))|))
 )
(C::LEMMA
 (19 1 (:LINEAR EXPT-X->=-X))
 (10 5 (:REWRITE DEFAULT-EXPT-2))
 (10 5 (:REWRITE |(expt 2^i n)|))
 (7 2 (:REWRITE SIMPLIFY-SUMS-<))
 (7 2 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-<))
 (7 2 (:REWRITE PREFER-POSITIVE-ADDENDS-<))
 (5 5 (:REWRITE DEFAULT-EXPT-1))
 (5 5 (:REWRITE |(expt x (- n))|))
 (5 5 (:REWRITE |(expt 1/c n)|))
 (5 5 (:REWRITE |(expt (- x) n)|))
 (4 4 (:REWRITE NORMALIZE-TERMS-SUCH-AS-A/A+B-+-B/A+B))
 (4 4 (:REWRITE NORMALIZE-ADDENDS))
 (3 3 (:REWRITE REMOVE-WEAK-INEQUALITIES-ONE))
 (2 2 (:REWRITE |(< (- x) (- y))|))
 (2 2 (:LINEAR EXPT-IS-WEAKLY-DECREASING-FOR-POS-BASE-<-1))
 (2 2 (:LINEAR EXPT-IS-INCREASING-FOR-BASE->-1))
 (2 2 (:LINEAR EXPT-IS-DECREASING-FOR-POS-BASE-<-1))
 (2 1 (:LINEAR EXPT-<-1-TWO))
 (1 1 (:LINEAR EXPT->-1-TWO))
 (1 1 (:LINEAR EXPT-<-1-ONE))
 )
(C::IENV->SCHAR-MIN-UPPER-BOUND
 (20 4 (:REWRITE SIMPLIFY-SUMS-<))
 (20 4 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-<))
 (20 4 (:REWRITE PREFER-POSITIVE-ADDENDS-<))
 (15 15 (:REWRITE REMOVE-WEAK-INEQUALITIES-TWO))
 (15 15 (:REWRITE REMOVE-WEAK-INEQUALITIES-ONE))
 (8 4 (:REWRITE DEFAULT-EXPT-2))
 (8 4 (:REWRITE |(expt 2^i n)|))
 (6 6 (:REWRITE NORMALIZE-TERMS-SUCH-AS-A/A+B-+-B/A+B))
 (6 6 (:REWRITE NORMALIZE-ADDENDS))
 (4 4 (:REWRITE DEFAULT-EXPT-1))
 (4 4 (:REWRITE |(expt x (- n))|))
 (4 4 (:REWRITE |(expt 1/c n)|))
 (4 4 (:REWRITE |(expt (- x) n)|))
 (4 2 (:REWRITE SIMPLIFY-SUMS-EQUAL))
 (4 2 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-EQUAL))
 (4 2 (:REWRITE PREFER-POSITIVE-ADDENDS-EQUAL))
 (2 2 (:REWRITE |(equal (- x) (- y))|))
 )
(C::IENV->SCHAR-MIN-OF-IENV-FIX-IENV
 (102 102 (:TYPE-PRESCRIPTION EXPT-TYPE-PRESCRIPTION-INTEGERP-BASE))
 (12 6 (:REWRITE DEFAULT-EXPT-2))
 (12 6 (:REWRITE |(expt 2^i n)|))
 (10 10 (:REWRITE NORMALIZE-TERMS-SUCH-AS-A/A+B-+-B/A+B))
 (10 10 (:REWRITE NORMALIZE-ADDENDS))
 (6 6 (:REWRITE DEFAULT-EXPT-1))
 (6 6 (:REWRITE |(expt x (- n))|))
 (6 6 (:REWRITE |(expt 1/c n)|))
 (6 6 (:REWRITE |(expt (- x) n)|))
 (4 2 (:REWRITE SIMPLIFY-SUMS-EQUAL))
 (4 2 (:REWRITE SIMPLIFY-PRODUCTS-GATHER-EXPONENTS-EQUAL))
 (4 2 (:REWRITE PREFER-POSITIVE-ADDENDS-EQUAL))
 (3 1 (:REWRITE C::IENV-FIX-WHEN-IENVP))
 (2 2 (:TYPE-PRESCRIPTION C::IENVP))
 (2 2 (:REWRITE |(equal (- x) (- y))|))
 )
(C::IENV->SCHAR-MIN-IENV-EQUIV-CONGRUENCE-ON-IENV)
